// backend/utils/telegram.js
const pool = require("../db");

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "";
const API = BOT_TOKEN ? `https://api.telegram.org/bot${BOT_TOKEN}` : "";
const SITE = (process.env.SITE_PUBLIC_URL || "").replace(/\/+$/, "");

// –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ —Å–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞
const enabled = !!BOT_TOKEN;

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞
async function tgSend(chatId, text, extra = {}) {
  if (!enabled || !chatId || !text) return false;
  try {
    const payload = {
      chat_id: chatId,
      text,
      parse_mode: "HTML",
      disable_web_page_preview: true,
      ...extra,
    };
    // Node 18+ –∏–º–µ–µ—Ç fetch –≥–ª–æ–±–∞–ª—å–Ω–æ. –î–ª—è Node < 18 ‚Äî –¥–æ–±–∞–≤—å node-fetch.
    const res = await fetch(`${API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    return res.ok;
  } catch {
    return false;
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id –ø–æ—Å–ª–µ /start
async function linkProviderChat(providerId, chatId, username = null) {
  if (!providerId || !chatId) return;
  await pool.query(
    `UPDATE providers SET telegram_chat_id=$2, social = COALESCE(social, $3)
     WHERE id=$1 AND (telegram_chat_id IS DISTINCT FROM $2)`,
    [providerId, chatId, username ? `@${username}` : null]
  );
}
async function linkClientChat(clientId, chatId, username = null) {
  if (!clientId || !chatId) return;
  await pool.query(
    `UPDATE clients SET telegram_chat_id=$2, telegram = COALESCE(telegram, $3)
     WHERE id=$1 AND (telegram_chat_id IS DISTINCT FROM $2)`,
    [clientId, chatId, username ? `@${username}` : null]
  );
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ chat_id
async function getProviderChatId(providerId) {
  if (!providerId) return null;
  const q = await pool.query(
    `SELECT telegram_chat_id FROM providers WHERE id=$1`,
    [providerId]
  );
  return q.rows[0]?.telegram_chat_id || null;
}
async function getClientChatId(clientId) {
  if (!clientId) return null;
  const q = await pool.query(
    `SELECT telegram_chat_id FROM clients WHERE id=$1`,
    [clientId]
  );
  return q.rows[0]?.telegram_chat_id || null;
}

// –û–±—â–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
function fmtDates(dates = []) {
  const list = Array.isArray(dates) ? dates : [];
  if (!list.length) return "‚Äî";
  return list.join(", ");
}
function serviceUrl(providerId, bookingId = null) {
  // —Å—Å—ã–ª–∫–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏
  if (bookingId) return `${SITE}/dashboard/bookings#${bookingId}`;
  return `${SITE}/profile/provider/${providerId}`;
}

// ==== –ù–û–¢–ò–§–ò–ö–ê–¶–ò–ò –ü–û –°–û–ë–´–¢–ò–Ø–ú ====

// 1) –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ (pending) ‚Äî —Å–ª–∞—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
async function notifyNewRequest({ booking, provider, client, service }) {
  try {
    const chatId = await getProviderChatId(booking.provider_id);
    if (!chatId) return;
    const text =
      `<b>üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n` +
      `–£—Å–ª—É–≥–∞: <b>${service?.title || "‚Äî"}</b>\n` +
      `–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n` +
      (client?.name ? `–ö–ª–∏–µ–Ω—Ç: <b>${client.name}</b>\n` : "") +
      (booking.client_message ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${booking.client_message}\n` : "") +
      `\n–û—Ç–∫—Ä—ã—Ç—å: ${serviceUrl(booking.provider_id, booking.id)}`;
    await tgSend(chatId, text);
  } catch {}
}

// 2) –ü—Ä–æ–≤–∞–π–¥–µ—Ä —É–∫–∞–∑–∞–ª —Ü–µ–Ω—É (quote) ‚Äî —Å–ª–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É/–∑–∞—è–≤–∏—Ç–µ–ª—é
async function notifyQuote({ booking, price, currency, note, client, requester }) {
  try {
    // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –µ—Å–ª–∏ –µ—Å—Ç—å requester_provider_id ‚Äî –∑–Ω–∞—á–∏—Ç ¬´–ø—Ä–æ–≤–∞–π–¥–µ—Ä-–∑–∞—è–≤–∏—Ç–µ–ª—å¬ª,
    // –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    const chatId = booking.requester_provider_id
      ? await getProviderChatId(booking.requester_provider_id)
      : await getClientChatId(booking.client_id);
    if (!chatId) return;

    const text =
      `<b>üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ</b>\n` +
      `–¶–µ–Ω–∞: <b>${price} ${currency || "USD"}</b>\n` +
      (note ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${note}\n` : "") +
      `–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n` +
      `\n–û—Ç–∫—Ä—ã—Ç—å: ${serviceUrl(booking.provider_id, booking.id)}`;
    await tgSend(chatId, text);
  } catch {}
}

// 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî —Å–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
async function notifyConfirmed({ booking }) {
  try {
    // –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É:
    const chatProv = await getProviderChatId(booking.provider_id);
    if (chatProv) {
      await tgSend(
        chatProv,
        `<b>‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n${serviceUrl(booking.provider_id, booking.id)}`
      );
    }
    // –∫–ª–∏–µ–Ω—Ç—É/–∑–∞—è–≤–∏—Ç–µ–ª—é:
    const chatClient = booking.requester_provider_id
      ? await getProviderChatId(booking.requester_provider_id)
      : await getClientChatId(booking.client_id);
    if (chatClient) {
      await tgSend(
        chatClient,
        `<b>‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n${serviceUrl(booking.provider_id, booking.id)}`
      );
    }
  } catch {}
}

// 4) –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Äî —Å–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
async function notifyRejected({ booking, reason }) {
  try {
    const chat = booking.requester_provider_id
      ? await getProviderChatId(booking.requester_provider_id)
      : await getClientChatId(booking.client_id);
    if (!chat) return;
    const text =
      `<b>‚õîÔ∏è –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n` +
      (reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n` : "") +
      `–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n` +
      `${serviceUrl(booking.provider_id, booking.id)}`;
    await tgSend(chat, text);
  } catch {}
}

// 5) –û—Ç–º–µ–Ω–∞ ‚Äî —Å–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (–∫–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª)
async function notifyCancelled({ booking }) {
  try {
    const chat = await getProviderChatId(booking.provider_id);
    if (!chat) return;
    const text =
      `<b>‚ùé –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º</b>\n` +
      `–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n` +
      `${serviceUrl(booking.provider_id, booking.id)}`;
    await tgSend(chat, text);
  } catch {}
}

// 6) –û—Ç–º–µ–Ω–∞ ‚Äî —Å–ª–∞—Ç—å –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ (–æ—Ç–º–µ–Ω–∏–ª –ø—Ä–æ–≤–∞–π–¥–µ—Ä-–∑–∞—è–≤–∏—Ç–µ–ª—å –∏—Å—Ö–æ–¥—è—â—É—é)
async function notifyCancelledByRequester({ booking }) {
  try {
    const chat = await getProviderChatId(booking.provider_id);
    if (!chat) return;
    const text =
      `<b>‚ùé –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º</b>\n` +
      `–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n` +
      `${serviceUrl(booking.provider_id, booking.id)}`;
    await tgSend(chat, text);
  } catch {}
}

module.exports = {
  enabled,
  tgSend,
  linkProviderChat,
  linkClientChat,
  notifyNewRequest,
  notifyQuote,
  notifyConfirmed,
  notifyRejected,
  notifyCancelled,
  notifyCancelledByRequester,
};

