// backend/utils/telegram.js
const pool = require("../db");

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "";
const API = BOT_TOKEN ? `https://api.telegram.org/bot${BOT_TOKEN}` : "";
const SITE = (process.env.SITE_PUBLIC_URL || "").replace(/\/+$/, "");

// –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
const enabled = !!BOT_TOKEN;

/* ---------------- helpers ---------------- */

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —ç–∫—Ä–∞–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è parse_mode: "HTML"
function esc(s = "") {
  return String(s)
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;");
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
function fmtDates(dates = []) {
  const list = Array.isArray(dates) ? dates.map(String).filter(Boolean) : [];
  const uniq = [...new Set(list)].sort();
  return uniq.length ? uniq.join(", ") : "‚Äî";
}

// –°—Å—ã–ª–∫–∞ –≤ –∫–∞–±–∏–Ω–µ—Ç/–ø—Ä–æ—Ñ–∏–ª—å
function serviceUrl(providerId, bookingId = null) {
  // –ï—Å–ª–∏ SITE –∑–∞–¥–∞–Ω, –±—É–¥–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL (–¥–ª—è –∫–Ω–æ–ø–∫–∏)
  // –ï—Å–ª–∏ SITE –ø—É—Å—Ç, –≤–µ—Ä–Ω—ë–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å ‚Äî –∫–∞–∫ —Ä–∞–Ω—å—à–µ (—Ç–µ–∫—Å—Ç–æ–º —Ç–æ–∂–µ –æ–∫)
  if (bookingId) return `${SITE}/dashboard/bookings#${bookingId}`;
  return `${SITE}/profile/provider/${providerId}`;
}

// –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–∫—Ä—ã—Ç—å¬ª ‚Äî —Ç–æ–ª—å–∫–æ —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º https? URL
function openBtn(url) {
  if (!url || !/^https?:\/\//i.test(url)) return {};
  return {
    reply_markup: {
      inline_keyboard: [[{ text: "–û—Ç–∫—Ä—ã—Ç—å", url }]],
    },
  };
}

/* ------------- low-level send ------------- */

async function tgSend(chatId, text, extra = {}) {
  if (!enabled || !chatId || !text) return false;
  try {
    const payload = {
      chat_id: chatId,
      text,
      parse_mode: "HTML",
      disable_web_page_preview: true,
      ...extra,
    };
    // Node 18+ –∏–º–µ–µ—Ç fetch –≥–ª–æ–±–∞–ª—å–Ω–æ; –¥–ª—è Node < 18 ‚Äî –ø–æ–¥–∫–ª—é—á–∏ node-fetch.
    const res = await fetch(`${API}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!res.ok) {
      const body = await res.text().catch(() => "");
      console.warn("tgSend non-OK:", res.status, body);
    }
    return res.ok;
  } catch (e) {
    console.warn("tgSend failed:", e?.message || e);
    return false;
  }
}

/* ------- link chat_id after /start ------- */

async function linkProviderChat(providerId, chatId, username = null) {
  if (!providerId || !chatId) return;
  await pool.query(
    `UPDATE providers
        SET telegram_chat_id = $2,
            social = COALESCE(social, $3)
      WHERE id = $1
        AND (telegram_chat_id IS DISTINCT FROM $2)`,
    [providerId, chatId, username ? `@${username}` : null]
  );
}

async function linkClientChat(clientId, chatId, username = null) {
  if (!clientId || !chatId) return;
  await pool.query(
    `UPDATE clients
        SET telegram_chat_id = $2,
            telegram = COALESCE(telegram, $3)
      WHERE id = $1
        AND (telegram_chat_id IS DISTINCT FROM $2)`,
    [clientId, chatId, username ? `@${username}` : null]
  );
}

/* ------------- read chat_id ------------- */

async function getProviderChatId(providerId) {
  if (!providerId) return null;
  const q = await pool.query(
    `SELECT telegram_chat_id FROM providers WHERE id=$1`,
    [providerId]
  );
  return q.rows[0]?.telegram_chat_id || null;
}

async function getClientChatId(clientId) {
  if (!clientId) return null;
  const q = await pool.query(
    `SELECT telegram_chat_id FROM clients WHERE id=$1`,
    [clientId]
  );
  return q.rows[0]?.telegram_chat_id || null;
}

/* ------------- notifications ------------- */

// 1) –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ -> –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
async function notifyNewRequest({ booking, provider, client, service }) {
  try {
    const chatId = await getProviderChatId(booking.provider_id);
    if (!chatId) return;

    const url = serviceUrl(booking.provider_id, booking.id);
    const text =
      `<b>üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n` +
      `–£—Å–ª—É–≥–∞: <b>${esc(service?.title || "‚Äî")}</b>\n` +
      `–î–∞—Ç—ã: <b>${esc(fmtDates(booking.dates))}</b>\n` +
      (client?.name ? `–ö–ª–∏–µ–Ω—Ç: <b>${esc(client.name)}</b>\n` : "") +
      (booking.client_message ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${esc(booking.client_message)}\n` : "") +
      (url ? `\n–û—Ç–∫—Ä—ã—Ç—å: ${esc(url)}` : "");

    await tgSend(chatId, text, openBtn(url));
  } catch {}
}

// 2) –ü—Ä–æ–≤–∞–π–¥–µ—Ä —É–∫–∞–∑–∞–ª —Ü–µ–Ω—É -> –∫–ª–∏–µ–Ω—Ç—É/–∑–∞—è–≤–∏—Ç–µ–ª—é
async function notifyQuote({ booking, price, currency, note /*, client, requester */ }) {
  try {
    const chatId = booking.requester_provider_id
      ? await getProviderChatId(booking.requester_provider_id)
      : await getClientChatId(booking.client_id);
    if (!chatId) return;

    const url = serviceUrl(booking.provider_id, booking.id);
    const text =
      `<b>üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ</b>\n` +
      `–¶–µ–Ω–∞: <b>${esc(String(price))} ${esc(currency || "USD")}</b>\n` +
      (note ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${esc(note)}\n` : "") +
      `–î–∞—Ç—ã: <b>${esc(fmtDates(booking.dates))}</b>\n` +
      (url ? `\n–û—Ç–∫—Ä—ã—Ç—å: ${esc(url)}` : "");

    await tgSend(chatId, text, openBtn(url));
  } catch {}
}

// 3) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ -> –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º
async function notifyConfirmed({ booking }) {
  try {
    const url = serviceUrl(booking.provider_id, booking.id);
    const text =
      `<b>‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n` +
      `–î–∞—Ç—ã: <b>${esc(fmtDates(booking.dates))}</b>\n` +
      (url ? `${esc(url)}` : "");

    // –ü—Ä–æ–≤–∞–π–¥–µ—Ä—É
    const chatProv = await getProviderChatId(booking.provider_id);
    if (chatProv) await tgSend(chatProv, text, openBtn(url));

    // –ö–ª–∏–µ–Ω—Ç—É/–∑–∞—è–≤–∏—Ç–µ–ª—é
    const chatClient = booking.requester_provider_id
      ? await getProviderChatId(booking.requester_provider_id)
      : await getClientChatId(booking.client_id);
    if (chatClient) await tgSend(chatClient, text, openBtn(url));
  } catch {}
}

// 4) –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ -> –≤—Ç–æ—Ä–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
async function notifyRejected({ booking, reason }) {
  try {
    const chat = booking.requester_provider_id
      ? await getProviderChatId(booking.requester_provider_id)
      : await getClientChatId(booking.client_id);
    if (!chat) return;

    const url = serviceUrl(booking.provider_id, booking.id);
    const text =
      `<b>‚õîÔ∏è –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n` +
      (reason ? `–ü—Ä–∏—á–∏–Ω–∞: ${esc(reason)}\n` : "") +
      `–î–∞—Ç—ã: <b>${esc(fmtDates(booking.dates))}</b>\n` +
      (url ? `${esc(url)}` : "");

    await tgSend(chat, text, openBtn(url));
  } catch {}
}

// 5) –û—Ç–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º -> –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
async function notifyCancelled({ booking }) {
  try {
    const chat = await getProviderChatId(booking.provider_id);
    if (!chat) return;

    const url = serviceUrl(booking.provider_id, booking.id);
    const text =
      `<b>‚ùé –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º</b>\n` +
      `–î–∞—Ç—ã: <b>${esc(fmtDates(booking.dates))}</b>\n` +
      (url ? `${esc(url)}` : "");

    await tgSend(chat, text, openBtn(url));
  } catch {}
}

module.exports = {
  enabled,
  tgSend,
  linkProviderChat,
  linkClientChat,
  notifyNewRequest,
  notifyQuote,
  notifyConfirmed,
  notifyRejected,
  notifyCancelled,
};
