// backend/utils/telegram.js
const pool = require("../db");

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "";
const API = BOT_TOKEN ? `https://api.telegram.org/bot${BOT_TOKEN}` : "";
const SITE = (process.env.SITE_PUBLIC_URL || "").replace(/\/+$/, "");
const enabled = !!BOT_TOKEN;

/* ================== helpers ================== */

async function tgSend(chatId, text, extra = {}) {
  if (!enabled || !chatId || !text) return false;
  try {
    const payload = {
      chat_id: chatId,
      text,
      parse_mode: "HTML",
      disable_web_page_preview: true,
      ...extra,
    };
    const res = await fetch(`${API}/sendMessage`, {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(payload),
    });
    return res.ok;
  } catch {
    return false;
  }
}

function fmtDates(arr) {
  if (!Array.isArray(arr) || !arr.length) return "‚Äî";
  return arr.map((d) => String(d).slice(0, 10)).join(", ");
}
function urlProvider(tab = "bookings") {
  return `${SITE}/dashboard?tab=${tab}`;
}
function urlClient(tab = "bookings") {
  return `${SITE}/client?tab=${tab}`;
}

/* ===== chat_id linking ===== */

async function linkProviderChat(providerId, chatId) {
  if (!providerId || !chatId) return;
  await pool.query(`UPDATE providers SET telegram_chat_id=$2 WHERE id=$1`, [providerId, chatId]);
}
async function linkClientChat(clientId, chatId) {
  if (!clientId || !chatId) return;
  await pool.query(`UPDATE clients SET telegram_chat_id=$2 WHERE id=$1`, [clientId, chatId]);
}
async function getProviderChatId(providerId) {
  if (!providerId) return null;
  const q = await pool.query(`SELECT telegram_chat_id FROM providers WHERE id=$1`, [providerId]);
  return q.rows[0]?.telegram_chat_id || null;
}
async function getClientChatId(clientId) {
  if (!clientId) return null;
  const q = await pool.query(`SELECT telegram_chat_id FROM clients WHERE id=$1`, [clientId]);
  return q.rows[0]?.telegram_chat_id || null;
}

/* ================== BOOKINGS (—É–∂–µ –±—ã–ª–∏) ================== */
/** –ù–æ–≤–∞—è –±—Ä–æ–Ω—å ‚Üí –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É */
async function notifyNewRequest({ booking, client, service }) {
  try {
    const chat = await getProviderChatId(booking.provider_id);
    if (!chat) return;

    const title = service?.title || "–£—Å–ª—É–≥–∞";
    const dates = fmtDates(booking?.dates || []);
    const clientName = client?.name || "–ö–ª–∏–µ–Ω—Ç";

    const text =
      `<b>üÜï –ù–æ–≤–∞—è –±—Ä–æ–Ω—å</b>\n` +
      `–£—Å–ª—É–≥–∞: <b>${title}</b>\n` +
      `–ö–ª–∏–µ–Ω—Ç: <b>${clientName}</b>\n` +
      `–î–∞—Ç—ã: <b>${dates}</b>\n\n` +
      `–û—Ç–∫—Ä—ã—Ç—å: ${urlProvider("bookings")}`;
    await tgSend(chat, text);
  } catch {}
}

/** –ü—Ä–æ–≤–∞–π–¥–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ñ—Ñ–µ—Ä ‚Üí –∫–ª–∏–µ–Ω—Ç—É/–∑–∞—è–≤–∏—Ç–µ–ª—é */
async function notifyQuote({ booking, price, currency, note }) {
  try {
    // –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä ‚Üí —É–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞-–∑–∞—è–≤–∏—Ç–µ–ª—è, –∏–Ω–∞—á–µ –∫–ª–∏–µ–Ω—Ç–∞
    let chat = null;
    if (booking?.requester_provider_id) {
      chat = await getProviderChatId(booking.requester_provider_id);
    } else {
      chat = await getClientChatId(booking?.client_id);
    }
    if (!chat) return;

    const text =
      `<b>üí¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±—Ä–æ–Ω–∏</b>\n` +
      `–¶–µ–Ω–∞: <b>${Number(price) || 0} ${currency || "USD"}</b>\n` +
      (note ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${note}\n` : "") +
      `–î–∞—Ç—ã: <b>${fmtDates(booking?.dates)}</b>\n\n` +
      `–û—Ç–∫—Ä—ã—Ç—å: ${booking?.requester_provider_id ? urlProvider("bookings") : urlClient("bookings")}`;
    await tgSend(chat, text);
  } catch {}
}

/** –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Üí –æ–±–µ–∏–º —Å—Ç–æ—Ä–æ–Ω–∞–º */
async function notifyConfirmed({ booking }) {
  try {
    const chatClient = await getClientChatId(booking?.client_id);
    if (chatClient) {
      await tgSend(
        chatClient,
        `<b>‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n–û—Ç–∫—Ä—ã—Ç—å: ${urlClient("bookings")}`
      );
    }
    const chatProvider = await getProviderChatId(booking?.provider_id);
    if (chatProvider) {
      await tgSend(
        chatProvider,
        `<b>‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n–û—Ç–∫—Ä—ã—Ç—å: ${urlProvider("bookings")}`
      );
    }
    if (booking?.requester_provider_id) {
      const chatRequesterProv = await getProviderChatId(booking.requester_provider_id);
      if (chatRequesterProv) {
        await tgSend(
          chatRequesterProv,
          `<b>‚úÖ –ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞</b>\n–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n–û—Ç–∫—Ä—ã—Ç—å: ${urlProvider("bookings")}`
        );
      }
    }
  } catch {}
}

/** –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ‚Üí –∑–∞—è–≤–∏—Ç–µ–ª—é */
async function notifyRejected({ booking, reason }) {
  try {
    let chat = null;
    if (booking?.requester_provider_id) {
      chat = await getProviderChatId(booking.requester_provider_id);
    } else {
      chat = await getClientChatId(booking?.client_id);
    }
    if (!chat) return;

    const text =
      `<b>‚ùå –ë—Ä–æ–Ω—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>` +
      (reason ? `\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}` : "") +
      `\n–î–∞—Ç—ã: <b>${fmtDates(booking?.dates)}</b>\n\n` +
      `–û—Ç–∫—Ä—ã—Ç—å: ${booking?.requester_provider_id ? urlProvider("bookings") : urlClient("bookings")}`;
    await tgSend(chat, text);
  } catch {}
}

/** –û—Ç–º–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–æ–π/–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º ‚Üí –∫–ª–∏–µ–Ω—Ç—É/–∑–∞—è–≤–∏—Ç–µ–ª—é */
async function notifyCancelled({ booking }) {
  try {
    let chat = null;
    if (booking?.requester_provider_id) {
      chat = await getProviderChatId(booking.requester_provider_id);
    } else {
      chat = await getClientChatId(booking?.client_id);
    }
    if (chat) {
      await tgSend(
        chat,
        `<b>‚ö†Ô∏è –ë—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n–û—Ç–∫—Ä—ã—Ç—å: ${booking?.requester_provider_id ? urlProvider("bookings") : urlClient("bookings")}`
      );
    }
  } catch {}
}

/** –û—Ç–º–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º/–∑–∞—è–≤–∏—Ç–µ–ª–µ–º ‚Üí –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É */
async function notifyCancelledByRequester({ booking }) {
  try {
    const chat = await getProviderChatId(booking?.provider_id);
    if (!chat) return;
    await tgSend(
      chat,
      `<b>‚ö†Ô∏è –ó–∞—è–≤–∏—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω—å</b>\n–î–∞—Ç—ã: <b>${fmtDates(booking.dates)}</b>\n–û—Ç–∫—Ä—ã—Ç—å: ${urlProvider("bookings")}`
    );
  } catch {}
}

/* ================== REQUESTS (–Ω–æ–≤–æ–µ: –∑–∞—è–≤–∫–∏/inbox) ================== */
/** –≤—ã—Ç—è–Ω—É—Ç—å –∑–∞—è–≤–∫—É + —Å—Ç–æ—Ä–æ–Ω—ã, –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫—Ç–æ –∑–∞—è–≤–∏—Ç–µ–ª—å: –∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä */
async function getRequestActors(requestId) {
  const q = await pool.query(
    `
    SELECT
      r.id, COALESCE(r.status,'new') AS status, r.note, r.created_at,
      s.id AS service_id, s.title AS service_title, s.provider_id,

      c.id AS client_id, c.name AS client_name, c.phone AS client_phone,

      -- –µ—Å–ª–∏ ¬´–∫–ª–∏–µ–Ω—Ç¬ª –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–∑–µ—Ä–∫–∞–ª–æ) ‚Äî –Ω–∞–π–¥—ë–º –µ–≥–æ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é email/phone
      p2.id   AS requester_provider_id,
      p2.name AS requester_provider_name

    FROM requests r
    JOIN services  s ON s.id = r.service_id
    LEFT JOIN clients   c ON c.id = r.client_id
    LEFT JOIN providers p2 ON (p2.email IS NOT DISTINCT FROM c.email OR p2.phone IS NOT DISTINCT FROM c.phone)
    WHERE r.id = $1
    `,
    [requestId]
  );
  if (!q.rowCount) return null;

  const row = q.rows[0];
  const toProviderId = row.provider_id;
  const toProviderChat = await getProviderChatId(toProviderId);

  // –∑–∞—è–≤–∏—Ç–µ–ª—å: –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω p2 ‚Üí –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
  const fromIsProvider = !!row.requester_provider_id;
  const fromChat = fromIsProvider
    ? await getProviderChatId(row.requester_provider_id)
    : await getClientChatId(row.client_id);

  return {
    row,
    toProviderId,
    toProviderChat,
    fromIsProvider,
    fromChat,
  };
}

/** –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Üí –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É (–ª—é–±–æ–π —Ç–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞) */
async function notifyReqNew({ request_id }) {
  try {
    const a = await getRequestActors(request_id);
    if (!a || !a.toProviderChat) return;

    const text =
      `<b>üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n` +
      `–£—Å–ª—É–≥–∞: <b>${a.row.service_title || "‚Äî"}</b>\n` +
      (a.row.note ? `–°–æ–æ–±—â–µ–Ω–∏–µ: ${a.row.note}\n` : "") +
      `–û—Ç–∫—Ä—ã—Ç—å: ${urlProvider("requests")}`;
    await tgSend(a.toProviderChat, text);
  } catch {}
}

/** –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω—ë–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º ‚Üí –∑–∞—è–≤–∏—Ç–µ–ª—é (–∫–ª–∏–µ–Ω—Ç—É –∏–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É) */
async function notifyReqStatusChanged({ request_id, status }) {
  try {
    const a = await getRequestActors(request_id);
    if (!a || !a.fromChat) return;

    const statusMap = {
      processed: "‚ÑπÔ∏è –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
      accepted:  "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞",
      rejected:  "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
      new:       "üÜï –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞",
    };
    const title = statusMap[status] || `‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: ${status}`;

    const link = a.fromIsProvider ? urlProvider("requests") : urlClient("requests");
    const text =
      `<b>${title}</b>\n` +
      `–£—Å–ª—É–≥–∞: <b>${a.row.service_title || "‚Äî"}</b>\n` +
      (a.row.note ? `–°–æ–æ–±—â–µ–Ω–∏–µ: ${a.row.note}\n` : "") +
      `–û—Ç–∫—Ä—ã—Ç—å: ${link}`;
    await tgSend(a.fromChat, text);
  } catch {}
}

/** –ó–∞—è–≤–∏—Ç–µ–ª—å —É–¥–∞–ª–∏–ª/–æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É ‚Üí –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É */
async function notifyReqCancelledByRequester({ request_id }) {
  try {
    const a = await getRequestActors(request_id);
    if (!a || !a.toProviderChat) return;

    const text =
      `<b>‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞—è–≤–∏—Ç–µ–ª–µ–º</b>\n` +
      `–£—Å–ª—É–≥–∞: <b>${a.row.service_title || "‚Äî"}</b>\n` +
      `–û—Ç–∫—Ä—ã—Ç—å: ${urlProvider("requests")}`;
    await tgSend(a.toProviderChat, text);
  } catch {}
}

/** –ü—Ä–æ–≤–∞–π–¥–µ—Ä —É–¥–∞–ª–∏–ª –∑–∞—è–≤–∫—É ‚Üí –∑–∞—è–≤–∏—Ç–µ–ª—é */
async function notifyReqDeletedByProvider({ request_id }) {
  try {
    const a = await getRequestActors(request_id);
    if (!a || !a.fromChat) return;

    const link = a.fromIsProvider ? urlProvider("requests") : urlClient("requests");
    const text =
      `<b>üóëÔ∏è –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º</b>\n` +
      `–£—Å–ª—É–≥–∞: <b>${a.row.service_title || "‚Äî"}</b>\n` +
      `–û—Ç–∫—Ä—ã—Ç—å: ${link}`;
    await tgSend(a.fromChat, text);
  } catch {}
}

module.exports = {
  enabled,
  tgSend,
  linkProviderChat,
  linkClientChat,
  // BOOKINGS:
  notifyNewRequest,
  notifyQuote,
  notifyConfirmed,
  notifyRejected,
  notifyCancelled,
  notifyCancelledByRequester,
  // REQUESTS (–Ω–æ–≤–æ–µ):
  notifyReqNew,
  notifyReqStatusChanged,
  notifyReqCancelledByRequester,
  notifyReqDeletedByProvider,
};
