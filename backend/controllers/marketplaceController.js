const pool = require("../db");

const searchListings = async (req, res) => {
  const {
    category,
    startDate,
    endDate,
    location,
    adults,
    children,
    infants,
    providerType,
    filters = {} // üëà –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ –ø–æ–ª—è details
  } = req.body;

  try {
    const conditions = [];
    const values = [];
    let index = 1;

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥–∏
    if (category) {
      conditions.push(`services.category = $${index}`);
      values.push(category);
      index++;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    if (providerType) {
      conditions.push(`providers.type = $${index}`);
      values.push(providerType);
      index++;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ: –Ω–µ –≤–∫–ª—é—á–∞—Ç—å –µ—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞
    if (startDate && endDate) {
      conditions.push(`
        NOT EXISTS (
          SELECT 1 FROM jsonb_array_elements_text(services.availability) AS a
          WHERE a::DATE BETWEEN $${index}::DATE AND $${index + 1}::DATE
        )
      `);
      values.push(startDate, endDate);
      index += 2;
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ª–æ–∫–∞—Ü–∏–∏
    if (location) {
      conditions.push(`providers.location ILIKE $${index}`);
      values.push(`%${location}%`);
      index++;
    }

    // –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ details
    const direction = filters.details?.directionCountry;
    const city = filters.details?.directionTo;

    if (direction) {
      conditions.push(`services.details->>'directionCountry' ILIKE $${index}`);
      values.push(`%${direction}%`);
      index++;
    }

    if (city) {
      conditions.push(`services.details->>'directionTo' ILIKE $${index}`);
      values.push(`%${city}%`);
      index++;
    }

    const whereClause = conditions.length > 0 ? "WHERE " + conditions.join(" AND ") : "";

    const query = `
      SELECT services.*, providers.name AS provider_name, providers.type AS provider_type
      FROM services
      JOIN providers ON services.provider_id = providers.id
      ${whereClause}
      ORDER BY services.created_at DESC
    `;

    const results = await pool.query(query, values);

    res.json(results.rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

module.exports = { searchListings };
