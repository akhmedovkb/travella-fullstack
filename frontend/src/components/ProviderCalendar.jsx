// frontend/src/components/ProviderCalendar.jsx
import React, { useEffect, useMemo, useState } from "react";
import { DayPicker } from "react-day-picker";
import "react-day-picker/dist/style.css";
import axios from "axios";
import { toast } from "react-toastify";
import { useTranslation } from "react-i18next";

/** ===== helpers ===== */
const toYMD = (d) => {
  const dt = new Date(d);
  const y = dt.getFullYear();
  const m = String(dt.getMonth() + 1).padStart(2, "0");
  const day = String(dt.getDate()).padStart(2, "0");
  return `${y}-${m}-${day}`;
};

// –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª —Å–µ—Ä–≤–µ—Ä: "YYYY-MM-DD" –ò–õ–ò { date|day: "YYYY-MM-DD" }
const normalizeServerDatesToStrings = (arr) => {
  const out = new Set();
  (Array.isArray(arr) ? arr : []).forEach((v) => {
    const s =
      typeof v === "string"
        ? v
        : v?.date || v?.day || (typeof v === "object" ? String(v) : "");
    const m = String(s).match(/^(\d{4})-(\d{2})-(\d{2})$/);
    if (m) out.add(`${m[1]}-${m[2]}-${m[3]}`);
  });
  return Array.from(out).sort();
};

// –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º "YYYY-MM-DD" –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π Date –±–µ–∑ —Å–¥–≤–∏–≥–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
const ymdListToLocalDates = (list) =>
  (list || []).map((s) => {
    const [y, m, d] = s.split("-").map(Number);
    return new Date(y, m - 1, d);
  });

/** ===== component ===== */
const ProviderCalendar = ({ token }) => {
  const { t } = useTranslation();

  // —Ç–æ, —á—Ç–æ —É–∂–µ –ª–µ–∂–∏—Ç –≤ –ë–î (—Å—Ç—Ä–æ–∫–∏ YYYY-MM-DD)
  const [serverDates, setServerDates] = useState([]);
  // —Ç–µ–∫—É—â–µ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ UI (—Å—Ç—Ä–æ–∫–∏ YYYY-MM-DD)
  const [selectedDates, setSelectedDates] = useState([]);
  const [loading, setLoading] = useState(false);
  const [saving, setSaving] = useState(false);

  const config = useMemo(
    () => ({ headers: { Authorization: `Bearer ${token}` } }),
    [token]
  );

  // –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ–º /booked-dates ‚Äî –∫–∞–∫ —É —Ç–µ–±—è –≤ –ø—Ä–æ–¥–µ)
  useEffect(() => {
    if (!token) return;
    setLoading(true);
    axios
      .get(`${import.meta.env.VITE_API_BASE_URL}/api/providers/booked-dates`, config)
      .then(({ data }) => {
        const normalized = normalizeServerDatesToStrings(data);
        setServerDates(normalized);
        // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–¥–µ–ª—è–µ–º —Ç–æ, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        setSelectedDates(normalized);
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç", err);
        toast.error(t("calendar.load_error") || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã");
      })
      .finally(() => setLoading(false));
  }, [token]);

  // –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ Date –¥–ª—è DayPicker
  const selectedAsDates = useMemo(
    () => ymdListToLocalDates(selectedDates),
    [selectedDates]
  );

  // –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ –∫–ª–∏–∫—É
  const toggleDate = (day) => {
    const ymd = toYMD(day);
    setSelectedDates((prev) =>
      prev.includes(ymd) ? prev.filter((x) => x !== ymd) : [...prev, ymd]
    );
  };

  // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∏—Ñ—Ñ { add, remove }
  const handleSave = async () => {
    setSaving(true);
    try {
      const before = new Set(serverDates);
      const after = Array.from(new Set(selectedDates)).sort();

      const add = after.filter((d) => !before.has(d));
      const remove = serverDates.filter((d) => !after.includes(d));

      await axios.post(
        `${import.meta.env.VITE_API_BASE_URL}/api/providers/blocked-dates`,
        { add, remove },
        config
      );

      setServerDates(after);
      toast.success(t("calendar.saved_successfully") || "–î–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö –¥–∞—Ç", e);
      toast.error(t("calendar.save_error") || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="bg-white p-4 rounded-lg shadow-md mt-6">
      <DayPicker
        mode="multiple"
        selected={selectedAsDates}
        onDayClick={toggleDate}
        disabled={[{ before: new Date() }]}
        modifiersClassNames={{ selected: "bg-red-500 text-white" }}
      />

      <button
        onClick={handleSave}
        disabled={saving || loading}
        className="mt-4 px-4 py-2 bg-orange-500 text-white rounded hover:bg-orange-600 disabled:opacity-60"
      >
        {saving
          ? t("saving") || "–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶"
          : t("calendar.save_blocked_dates") || "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã"}
      </button>

      <p className="text-sm mt-2 text-gray-600">
        üî¥ {t("calendar.manual_blocked", "–†—É—á–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")}
      </p>
    </div>
  );
};

export default ProviderCalendar;
